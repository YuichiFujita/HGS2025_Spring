//============================================================
//
//	データ保存処理 [retention.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "retention.h"

//************************************************************
//	親クラス [CRetention] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CRetention::CRetention() :
#ifdef SCORE
	m_nScore		 (0),		// クリアスコア
#else TIMER
	m_fTime			 (0.0f),	// クリアタイム
#endif
	m_nUpdateRankIdx (-1)		// ランキング更新インデックス
{

}

//============================================================
//	デストラクタ
//============================================================
CRetention::~CRetention()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CRetention::Init()
{
	// メンバ変数を初期化
#ifdef SCORE
	m_nScore		 = 0;		// クリアスコア
#else TIMER
	m_fTime			 = 0.0f;	// クリアタイム
#endif
	m_nUpdateRankIdx = -1;		// ランキング更新インデックス

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CRetention::Uninit()
{

}

//============================================================
//	生成処理
//============================================================
CRetention* CRetention::Create()
{
	// データ保存の生成
	CRetention* pRetention = new CRetention;
	if (pRetention == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// データ保存の初期化
		if (FAILED(pRetention->Init()))
		{ // 初期化に失敗した場合

			// データ保存の破棄
			SAFE_DELETE(pRetention);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pRetention;
	}
}

//============================================================
//	破棄処理
//============================================================
void CRetention::Release(CRetention*& prRetention)
{
	// データ保存の終了
	assert(prRetention != nullptr);
	prRetention->Uninit();

	// メモリ開放
	SAFE_DELETE(prRetention);
}
