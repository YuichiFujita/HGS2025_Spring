//============================================================
//
//	銃弾処理 [bullet.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "bullet.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const D3DXVECTOR3 RADIUS = D3DXVECTOR3(10.0f, 10.0f, 0.0f);		// 半径
	const float SPEED = 4.0f;		// 速度
}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CListManager<CBullet>* CBullet::m_pList = nullptr;	// オブジェクトリスト

//************************************************************
//	子クラス [CBullet] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBullet::CBullet() : CObject3D(CObject::LABEL_BLOCK, CObject::DIM_3D, 5),
m_bRight(true)					// 右側状況
{

}

//============================================================
//	デストラクタ
//============================================================
CBullet::~CBullet()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBullet::Init()
{
	// オブジェクト3Dの初期化
	if (FAILED(CObject3D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	if (m_pList == nullptr)
	{ // リストマネージャーが存在しない場合

		// リストマネージャーの生成
		m_pList = CListManager<CBullet>::Create();
		if (m_pList == nullptr)
		{ // 生成に失敗した場合

			// 失敗を返す
			assert(false);
			return E_FAIL;
		}
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBullet::Uninit()
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}

	// オブジェクト3Dの終了
	CObject3D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBullet::Update(const float fDeltaTime)
{
	if (useful::ScreenOut(GetVec3Position(), RADIUS.x))
	{ // 画面外に出た場合

		// 終了処理
		Uninit();
		return;
	}

	// 移動処理
	Move();

	// 頂点座標の設定処理
	SetVtx();
}

//============================================================
//	描画処理
//============================================================
void CBullet::Draw(CShader* pShader)
{
	// オブジェクト3Dの描画
	CObject3D::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CBullet* CBullet::Create
(
	const VECTOR3& rPos,	// 位置
	const bool bRight		// 右側
)
{
	// 銃弾の生成
	CBullet* pBlock = new CBullet;

	if (pBlock == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// プレイヤーの初期化
		if (FAILED(pBlock->Init()))
		{ // 初期化に失敗した場合

			// プレイヤーの破棄
			SAFE_DELETE(pBlock);
			return nullptr;
		}

		// 位置を設定
		pBlock->SetVec3Position(rPos);

		// 向きを設定
		pBlock->SetVec3Rotation(VEC3_ZERO);

		// サイズを設定
		pBlock->SetVec3Size(RADIUS);

		// 右側情報を設定
		pBlock->m_bRight = bRight;

		// 確保したアドレスを返す
		return pBlock;
	}
}

//============================================================
//	リスト取得処理
//============================================================
CListManager<CBullet>* CBullet::GetList()
{
	// オブジェクトリストを返す
	return m_pList;
}

//============================================================
// 移動処理
//============================================================
void CBullet::Move(void)
{
	// 位置取得
	VECTOR3 pos = GetVec3Position();

	// 位置を進める
	if (m_bRight)
	{ // 右側移動の場合
		pos.x += SPEED;
	}
	else
	{ // 左側移動の場合
		pos.x -= SPEED;
	}

	// 位置設定
	SetVec3Position(pos);
}
