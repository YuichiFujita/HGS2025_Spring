//============================================================
//
//	ブロック処理 [block.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "block.h"

#include "blockBreak.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CListManager<CBlock>* CBlock::m_pList = nullptr;	// オブジェクトリスト

//************************************************************
//	子クラス [CBlock] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBlock::CBlock() : CObjectMeshCube(CObject::LABEL_BLOCK, CObject::DIM_3D, 4),
m_type(CBlock::TYPE_BREAK),		// 種類
m_bRight(true)					// 右側状況
{

}

//============================================================
//	デストラクタ
//============================================================
CBlock::~CBlock()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBlock::Init()
{
	// オブジェクトメッシュキューブの初期化
	if (FAILED(CObjectMeshCube::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	if (m_pList == nullptr)
	{ // リストマネージャーが存在しない場合

		// リストマネージャーの生成
		m_pList = CListManager<CBlock>::Create();
		if (m_pList == nullptr)
		{ // 生成に失敗した場合

			// 失敗を返す
			assert(false);
			return E_FAIL;
		}
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBlock::Uninit()
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}

	// オブジェクトメッシュキューブの終了
	CObjectMeshCube::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBlock::Update(const float fDeltaTime)
{

}

//============================================================
//	描画処理
//============================================================
void CBlock::Draw(CShader* pShader)
{
	// オブジェクトメッシュキューブの描画
	CObjectMeshCube::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CBlock* CBlock::Create
(
	const VECTOR3& rPos,	// 位置
	const EType type,		// 種類
	const bool bRight		// 右側
)
{
	// ブロックの生成
	CBlock* pBlock = nullptr;

	switch (type)
	{
	case CBlock::TYPE_BREAK:

		// 破壊可能ブロック
		pBlock = new CBlockBreak;

		break;

	default:

		// 停止
		assert(false);

		break;
	}

	if (pBlock == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// プレイヤーの初期化
		if (FAILED(pBlock->Init()))
		{ // 初期化に失敗した場合

			// プレイヤーの破棄
			SAFE_DELETE(pBlock);
			return nullptr;
		}

		// 位置を設定
		pBlock->SetVec3Position(rPos);

		// 右側情報を設定
		pBlock->m_bRight = bRight;

		// 確保したアドレスを返す
		return pBlock;
	}
}

//============================================================
//	リスト取得処理
//============================================================
CListManager<CBlock>* CBlock::GetList()
{
	// オブジェクトリストを返す
	return m_pList;
}
