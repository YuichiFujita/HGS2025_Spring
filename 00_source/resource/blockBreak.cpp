//============================================================
//
//	破壊可能ブロック処理 [blockBreak.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "blockBreak.h"
#include "manager.h"
#include "sound.h"
#include "explosion.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	namespace explosion
	{
		const VECTOR3 SIZE = VECTOR3(180.0f, 180.0f, 0.0f);	// 大きさ
	}
}

//************************************************************
//	子クラス [CBlockBreak] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBlockBreak::CBlockBreak() : CBlock()
{

}

//============================================================
//	デストラクタ
//============================================================
CBlockBreak::~CBlockBreak()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBlockBreak::Init()
{
	// ブロックの初期化
	if (FAILED(CBlock::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBlockBreak::Uninit()
{
	// ブロックの終了
	CBlock::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBlockBreak::Update(const float fDeltaTime)
{
	// ブロックの更新処理
	CBlock::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CBlockBreak::Draw(CShader* pShader)
{
	// ブロックの描画
	CBlock::Draw(pShader);
}

//============================================================
// ヒット処理
//============================================================
bool CBlockBreak::Hit()
{
	// 死んでいた場合、関数を抜ける
	if (IsDeath()) { return false; }

	// 爆発させる
	CExplosion::Create(CExplosion::TYPE_FIRE, GetVec3Position(), explosion::SIZE);

	// 終了処理
	Uninit();

	// 爆破音再生
	PLAY_SOUND(CSound::LABEL_SE_EXPLOSION);

	return true;
}
